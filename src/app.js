// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Grid = require("./grid.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Error = require("./error.js");
var React = require("react");
var Decode = require("./Decode.js");
var Single = require("./single.js");
var Spinner = require("./spinner.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("App");

var token = (process.env.API_TOKEN);

function urlToRoute(url) {
  var match = url[/* path */0];
  if (match && match[0] === "view") {
    var match$1 = match[1];
    if (match$1 && !match$1[1]) {
      return /* Detail */[match$1[0]];
    } else {
      return /* Default */0;
    }
  } else {
    return /* Default */0;
  }
}

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var watcher = ReasonReact.Router[/* watchUrl */1]((function (url) {
                      return Curry._1(self[/* send */3], /* ChangeRoute */Block.__(4, [urlToRoute(url)]));
                    }));
              Curry._1(self[/* send */3], /* FetchPosts */0);
              return Curry._1(self[/* onUnmount */4], (function () {
                            return ReasonReact.Router[/* unwatchUrl */2](watcher);
                          }));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var match = param[/* state */1];
              var activeRoute = match[/* activeRoute */2];
              var posts = match[/* posts */1];
              var onLink = function (id) {
                return Curry._1(send, /* ChangeRoute */Block.__(4, [id]));
              };
              var onLike = function (post, like) {
                return Curry._1(send, /* Like */Block.__(3, [
                              post,
                              like
                            ]));
              };
              var tmp;
              switch (match[/* load */0]) {
                case 0 : 
                    tmp = ReasonReact.element(undefined, undefined, Spinner.make(/* array */[]));
                    break;
                case 1 : 
                    tmp = activeRoute ? ReasonReact.element(undefined, undefined, Single.make(posts, activeRoute[0], match[/* comments */3], onLike, onLink, /* array */[])) : ReasonReact.element(undefined, undefined, Grid.make(posts, onLike, onLink, /* array */[]));
                    break;
                case 2 : 
                    tmp = ReasonReact.element(undefined, undefined, $$Error.make(/* array */[]));
                    break;
                
              }
              return React.createElement("div", undefined, React.createElement("h1", undefined, React.createElement("a", {
                                  href: "/"
                                }, "Catstagram")), tmp);
            }),
          /* initialState */(function () {
              return /* record */[
                      /* load : Loading */0,
                      /* posts : [] */0,
                      /* activeRoute */urlToRoute(ReasonReact.Router[/* dangerouslyGetInitialUrl */3](/* () */0)),
                      /* comments : [] */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action === 0) {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* record */[
                              /* load : Loading */0,
                              /* posts */state[/* posts */1],
                              /* activeRoute */state[/* activeRoute */2],
                              /* comments */state[/* comments */3]
                            ],
                            (function (self) {
                                fetch("https://api.instagram.com/v1/users/self/media/recent/?access_token=" + (String(token) + "")).then((function (prim) {
                                            return prim.json();
                                          })).then((function (json) {
                                          var posts = Decode.posts(json);
                                          return Promise.resolve(Curry._1(self[/* send */3], /* FetchedPosts */Block.__(1, [posts])));
                                        })).catch((function () {
                                        return Promise.resolve(Curry._1(self[/* send */3], /* FailedToFetch */1));
                                      }));
                                return /* () */0;
                              })
                          ]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* load : Error */2,
                              /* posts */state[/* posts */1],
                              /* activeRoute */state[/* activeRoute */2],
                              /* comments */state[/* comments */3]
                            ]]);
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      var mediaId = action[0];
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* load : Loading */0,
                                  /* posts */state[/* posts */1],
                                  /* activeRoute */state[/* activeRoute */2],
                                  /* comments */state[/* comments */3]
                                ],
                                (function (self) {
                                    fetch("https://api.instagram.com/v1/media/" + (String(mediaId) + ("/comments?access_token=" + (String(token) + "")))).then((function (prim) {
                                                return prim.json();
                                              })).then((function (json) {
                                              var comments = Decode.comments(json);
                                              return Promise.resolve(Curry._1(self[/* send */3], /* FetchedComments */Block.__(2, [comments])));
                                            })).catch((function () {
                                            return Promise.resolve(Curry._1(self[/* send */3], /* FailedToFetch */1));
                                          }));
                                    return /* () */0;
                                  })
                              ]);
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* load : Loaded */1,
                                  /* posts */action[0],
                                  /* activeRoute */state[/* activeRoute */2],
                                  /* comments */state[/* comments */3]
                                ]]);
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* load : Loaded */1,
                                  /* posts */state[/* posts */1],
                                  /* activeRoute */state[/* activeRoute */2],
                                  /* comments */action[0]
                                ]]);
                  case 3 : 
                      var like = action[1];
                      var post = action[0];
                      return /* Update */Block.__(0, [/* record */[
                                  /* load */state[/* load */0],
                                  /* posts */Belt_List.map(state[/* posts */1], (function (p) {
                                          var match = Caml_obj.caml_equal(p, post);
                                          if (match) {
                                            return /* record */[
                                                    /* id */p[/* id */0],
                                                    /* caption */p[/* caption */1],
                                                    /* images */p[/* images */2],
                                                    /* likes : record */[/* count */p[/* likes */3][/* count */0] + (
                                                        like ? 1 : -1
                                                      ) | 0],
                                                    /* comments */p[/* comments */4],
                                                    /* user_has_liked */like
                                                  ];
                                          } else {
                                            return p;
                                          }
                                        })),
                                  /* activeRoute */state[/* activeRoute */2],
                                  /* comments */state[/* comments */3]
                                ]]);
                  case 4 : 
                      var activeRoute = action[0];
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* load */state[/* load */0],
                                  /* posts */state[/* posts */1],
                                  /* activeRoute */activeRoute,
                                  /* comments */state[/* comments */3]
                                ],
                                (function (self) {
                                    if (activeRoute) {
                                      return Curry._1(self[/* send */3], /* FetchComment */Block.__(0, [activeRoute[0]]));
                                    } else {
                                      console.log("what goes here???");
                                      return /* () */0;
                                    }
                                  })
                              ]);
                  
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.token = token;
exports.urlToRoute = urlToRoute;
exports.make = make;
/* component Not a pure module */
