// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Link = require("./Link.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Repromise = require("@aantron/repromise/src/js/repromise.js");
var LogoSvg = require("./logo.svg");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

((require('./app.css')));

function parseGiphyResponse(json) {
  var match = Js_json.decodeObject(json);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["data"];
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(match$1);
      if (match$2 !== undefined) {
        var match$3 = Js_primitive.valFromOption(match$2)["image_url"];
        if (match$3 !== undefined) {
          return Js_json.decodeString(match$3);
        } else {
          return undefined;
        }
      } else {
        return undefined;
      }
    } else {
      return undefined;
    }
  }
  
}

function fetchCats(cb) {
  return Repromise.wait((function (json) {
                return Curry._1(cb, parseGiphyResponse(json));
              }), Repromise.andThen((function (prim) {
                    return prim.json();
                  }), fetch("https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=cats")));
}

var component = ReasonReact.reducerComponent("App");

function make(message, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* gifUrl */0];
              return React.createElement("div", {
                          className: "App"
                        }, React.createElement("div", {
                              className: "App-header"
                            }, React.createElement("img", {
                                  className: "App-logo",
                                  alt: "logo",
                                  src: LogoSvg
                                }), React.createElement("h2", undefined, message)), React.createElement("p", {
                              className: "App-intro"
                            }, "To get started, edit", React.createElement("code", undefined, " src/app.re "), "and save to reload.", ReasonReact.element(undefined, undefined, Link.make("ReasonML", /* Hashtag */1, /* array */[]))), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement("p", undefined, React.createElement("button", {
                                  onClick: (function () {
                                      return Curry._1(self[/* send */3], /* FetchCats */0);
                                    })
                                }, "Necesito m√°s gatos!")), React.createElement("p", undefined, match !== undefined ? React.createElement("img", {
                                    src: match
                                  }) : "Faltan gatos en este momento."));
            }),
          /* initialState */(function () {
              return /* record */[/* gifUrl */undefined];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              if (action) {
                return /* Update */Block.__(0, [/* record */[/* gifUrl */action[0]]]);
              } else {
                return /* SideEffects */Block.__(1, [(function (self) {
                              return fetchCats((function (newCatUrl) {
                                            return Curry._1(self[/* send */3], /* SaveCatsUrl */[newCatUrl]);
                                          }));
                            })]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.parseGiphyResponse = parseGiphyResponse;
exports.fetchCats = fetchCats;
exports.component = component;
exports.make = make;
/*  Not a pure module */
